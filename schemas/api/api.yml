openapi: "3.0.0"
info:
  title: "North Manly Squash API"
  version: "1.0.0"
servers:
  - url: https://{hostname}/api
    variables:
      hostname:
        default: north-manly-squash.herokuapp.com
tags:
  - name: admin
    description: |
      The series of APIs for admin use

  - name: event
    description: |
      The series of APIs for events

  - name: user_event
    description: |
      The series of APIs for user events

  - name: user
    description: |
      The series of APIs for users

  - name: rank
    description: |
      The series of APIs for ranks

  - name: match
    description: |
      The series of APIs for matches

paths:
  /event:
    get:
      operationId: GetEvents
      tags: [event]
      summary: Get all open events with users
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventsResponseModel"
        "500":
          $ref: "#/components/responses/ErrorInternal"

    post:
      operationId: PostEvent
      tags: [event]
      summary: Create an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventModel"
      responses:
        "204":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventModel"
        "403":
          $ref: "#/components/responses/ErrorUnauthorised"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /event/{id}:
    parameters:
      - $ref: "#/components/parameters/pathWithID"
    get:
      operationId: GetEventByID
      tags: [event]
      summary: Get event by ID with event_users attached
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventModel"
        "500":
          $ref: "#/components/responses/ErrorInternal"

    patch:
      operationId: PatchEventByID
      tags: [event]
      summary: Patch event by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchEventModel"
      responses:
        "204":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventModel"
        "403":
          $ref: "#/components/responses/ErrorUnauthorised"
        "500":
          $ref: "#/components/responses/ErrorInternal"

    # add user to event
    post:
      operationId: PostEventByID
      tags: [event]
      summary: Post event by ID
      #ReqBody not needed, we only need userID (from token)
      responses:
        "204":
          description: "successful response"
        "403":
          $ref: "#/components/responses/ErrorUnauthorised"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/me:
    get:
      operationId: GetUserMe
      tags: [user]
      summary: Get current user details
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPasswordModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/{id}:
    parameters:
      - $ref: "#/components/parameters/pathWithID"
    get:
      operationId: GetUserByID
      tags: [user]
      summary: Get specific user details
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPasswordModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

    patch:
      operationId: Patch User
      tags: [user]
      summary: Update user details
      requestBody:
        required: true
        description: User patch details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatchModel"
      responses:
        "204":
          description: "successful response"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/refresh:
    get:
      operationId: GetUserRefresh
      tags: [user]
      summary: Get current user details
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserWithAuthTokenModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/login:
    post:
      operationId: PostUserLogin
      tags: [user]
      summary: User login
      requestBody:
        required: true
        description: User login details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginModel"
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserWithAuthTokenModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/create:
    post:
      operationId: PostUserCreate
      tags: [user]
      summary: User create
      requestBody:
        required: true
        description: User create account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateModel"
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserWithAuthTokenModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/password/reset:
    post:
      operationId: PostUserResetPassword
      tags: [user]
      summary: User reset password
      requestBody:
        required: true
        description: User reset password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserResetPasswordModel"
      responses:
        "204":
          description: "successful response"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /user/password/generate:
    post:
      operationId: PostUserGenerateResetPassword
      tags: [user]
      summary: User generate reset token
      requestBody:
        required: true
        description: User generate reset token
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGeneratePasswordResetModel"
      responses:
        "204":
          description: "successful response"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /admin/password/generate/{id}:
    parameters:
      - $ref: "#/components/parameters/pathWithID"
    post:
      operationId: PostAdminGenerateResetPassword
      tags: [admin]
      summary: Admin generate reset token for user
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminGeneratePasswordResetModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /admin/search-user:
    get:
      operationId: AdminSearchUser
      tags: [admin]
      summary: Admin search for users
      parameters:
        - in: path
          schema: { type: string }
          name: query
          required: true
          description: The search query
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminSearchUserResponseModel"

        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  # Rank endpoints
  /rank:
    get:
      operationId: GetRanks
      tags: [rank]
      summary: Get ranks of players in club
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RankResponseModel"

        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  #  Match endpoints
  /match:
    get:
      operationId: GetMatches
      tags: [match]
      summary: Get matches
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchGetResponseModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

    post:
      operationId: PostMatch
      tags: [match]
      summary: Create match
      requestBody:
        required: true
        description: User challenge another user to a match
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: number
                  description: User ID that is being challenged
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  /match/{id}:
    parameters:
      - $ref: "#/components/parameters/pathWithID"
    patch:
      operationId: PatchMatch
      tags: [match]
      summary: Update match
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchUpdateModel"
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

  #user event endpoints
  /user-events/{id}:
    parameters:
      - $ref: "#/components/parameters/pathWithID"
    patch:
      operationId: PostUserEvent
      tags: [user_event]
      summary: Patch user event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEventPatchModel"
      responses:
        "200":
          description: "successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEventModel"
        "401":
          $ref: "#/components/responses/ErrorUnauthenticated"
        "500":
          $ref: "#/components/responses/ErrorInternal"

components:
  parameters:
    pathWithID:
      in: path
      schema: { type: string }
      name: id
      required: true
      description: The event id to look up

  schemas:
    #Base schemas

    #events
    EventModel:
      $ref: "schemas/event/event.yml"

    CreateEventModel:
      $ref: "schemas/event/create_event.yml"

    PatchEventModel:
      $ref: "schemas/event/patch_event.yml"

    ParticipantModel:
      $ref: "schemas/event/participant.yml"

    #users
    UserBaseModel:
      $ref: "schemas/user/user_base.yml"

    UserPatchModel:
      $ref: "schemas/user/user_patch.yml"

    UserWithoutPasswordModel:
      $ref: "schemas/user/user_without_password.yml"

    UserLoginModel:
      $ref: "schemas/user/user_login.yml"

    UserCreateModel:
      $ref: "schemas/user/user_create.yml"

    UserResetPasswordModel:
      $ref: "schemas/user/user_reset_password.yml"

    #user events
    UserEventModel:
      $ref: "schemas/user_event/user_event.yml"

    UserEventPatchModel:
      $ref: "schemas/user_event/patch_user_event.yml"

    #match
    MatchModel:
      $ref: "schemas/match/match.yml"

    MatchUpdateModel:
      $ref: "schemas/match/match_update.yml"

    #Modifications e.g. arrays

    GetEventsResponseModel:
      description: "Array of events"
      type: "object"
      required: [events]
      properties:
        events:
          type: "array"
          items:
            $ref: "#/components/schemas/EventModel"

    GetUserWithAuthTokenModel:
      description: "UserRefresh"
      type: "object"
      properties:
        accessToken:
          description: Authentication token
          type: string
        user:
          $ref: "#/components/schemas/UserWithoutPasswordModel"

    UserGeneratePasswordResetModel:
      description: User generate password reset via email
      type: object
      properties:
        email:
          description: User email address
          type: string

    AdminGeneratePasswordResetModel:
      description: Admin generate password reset token
      type: object
      properties:
        token:
          description: Reset token
          type: string

    AdminSearchUserResponseModel:
      description: Admin search user model
      type: object
      properties:
        users:
          description: A list of users matching search
          type: array
          items:
            $ref: "#/components/schemas/UserWithoutPasswordModel"

    RankResponseModel:
      description: "Array of users"
      type: "object"
      required: [users]
      properties:
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/UserBaseModel"

    MatchGetResponseModel:
      description: "Array of matches"
      type: "object"
      required: [matches]
      properties:
        matches:
          type: "array"
          items:
            $ref: "#/components/schemas/MatchModel"

  responses:
    # API Gateway does not support response definitions here for '200' responses
    # It ignores error (non-200) responses
    ErrorInternal:
      $ref: "schemas/common_models.yml#/responses/ErrorInternal"
    ErrorUnauthenticated:
      $ref: "schemas/common_models.yml#/responses/ErrorUnauthenticated"
    ErrorUnauthorised:
      $ref: "schemas/common_models.yml#/responses/ErrorUnauthorised"
    ErrorNotFound:
      $ref: "schemas/common_models.yml#/responses/ErrorNotFound"
    ErrorBadRequest:
      $ref: "schemas/common_models.yml#/responses/ErrorBadRequest"
    ErrorConflict:
      $ref: "schemas/common_models.yml#/responses/ErrorConflict"
